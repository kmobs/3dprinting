[gcode_macro GlobalVariables]
# Location to park the toolhead when idle
variable_park_x: 30
variable_park_y: 300
variable_park_z: 30

# Location of the probe when docked.  This is the location
# to pick the probe up from.
variable_dock_x: 253.15
variable_dock_y: 300
variable_dock_z: 2.65

# The distance to move along y when removing the probe
# from the dock
variable_dock_y_offset: 35

variable_travel_speed: 3000
variable_dock_speed: 1000
variable_dock_speed_z: 250

[gcode_macro GlobalVariables]
variable_qgl_done: False
variable_probe_attached: False
variable_probe_locked: False
default_parameter_reset: False

gcode:
    CheckProbe action=query

    {% if params.RESET %}
        SET_GCODE_VARIABLE MACRO=GlobalVariables VARIABLE=qgl_done VALUE=False
    {% endif %}

[homing_override]
axes: xyz
set_position_z: 0
gcode:
    GlobalVariables
    CheckProbe verify=docked
    G90
    G1 Z10 F600
    G28 X Y
    G1 X208 Y300 F3000
    G28 Z
    G1 Z20 F1800
    PARK

[gcode_macro ATTACH_PROBE]
gcode:
    GlobalVariables
    CheckProbe verify=docked

    {% set dock_x = printer["gcode_macro GlobalVariables"].dock_x %}
    {% set dock_y = printer["gcode_macro GlobalVariables"].dock_y %}
    {% set dock_z = printer["gcode_macro GlobalVariables"].dock_z %}
    {% set dock_y_offset = printer["gcode_macro GlobalVariables"].dock_y_offset %}
    {% set travel_speed = printer["gcode_macro GlobalVariables"].travel_speed %}
    {% set dock_speed = printer["gcode_macro GlobalVariables"].dock_speed %}
    {% set dock_speed_z = printer["gcode_macro GlobalVariables"].dock_speed_z %}

    G90
    G28

    # If we are far away from the dock, move closer at travel speeds
    {% if printer.toolhead.position.y < dock_y - dock_y_offset %}
        G1 Y{ dock_y } F{ travel_speed }
    {% endif %}

    {% if (printer.toolhead.position.x < dock_x - 40) or (printer.toolhead.position.x > dock_x + 40) %}
        G1 X{ dock_x } F{ travel_speed }
    {% endif %}

    G1 X{ dock_x } F{ dock_speed }
    G1 Y{ dock_y } F{ dock_speed }
    G1 Z{ dock_z } F{ dock_speed_z }
    G1 Y{ dock_y - dock_y_offset } F{ dock_speed }
    G1 Z15 F{ dock_speed_z }
    G1 Z20 F{ travel_speed }

    CheckProbe verify=attached

[gcode_macro DOCK_PROBE]
gcode:
    GlobalVariables
    CheckProbe verify=attached

    {% set dock_x = printer["gcode_macro GlobalVariables"].dock_x %}
    {% set dock_y = printer["gcode_macro GlobalVariables"].dock_y %}
    {% set dock_z = printer["gcode_macro GlobalVariables"].dock_z %}
    {% set dock_y_offset = printer["gcode_macro GlobalVariables"].dock_y_offset %}
    {% set travel_speed = printer["gcode_macro GlobalVariables"].travel_speed %}
    {% set dock_speed = printer["gcode_macro GlobalVariables"].dock_speed %}
    {% set dock_speed_z = printer["gcode_macro GlobalVariables"].dock_speed_z %}

    G90
    G1 X{ dock_x } Y{ dock_y - dock_y_offset } F{ travel_speed }
    G1 Z{ dock_z } F{ dock_speed_z }
    G1 Y{ dock_y } F{ dock_speed }
    G1 Z30 F{ dock_speed_z }

    CheckProbe verify=docked
   

[gcode_macro G32]
gcode:
    {% set qgl_done = printer["gcode_macro GlobalVariables"].qgl_done %}
    G28
    {% if not qgl_done %}
        QUAD_GANTRY_LEVEL
        G28 Z
        SET_GCODE_VARIABLE MACRO=GlobalVariables VARIABLE=qgl_done VALUE={ True }
    {% endif %}

# CheckProbe
#
# This macro provides some error handling.  For example, if you 
# call CheckProbe action=dock this macro will estop if the probe is attached.
#
# The idea here is to call CheckProbe after attaching/docking or when you want
# to verify the probe state before a move.
[gcode_macro CheckProbe]
variable_probate_state: 0
default_parameter_verify:
gcode:
    QUERY_PROBE
    CheckProbeInternal verify={ VERIFY }

[gcode_macro CheckProbeInternal]
default_parameter_verify:
gcode:
    # Because we are wired NC, we will be triggered (1) when
    # the probe is not attached.  Use the inverse.
    {% set probeAttached = not printer.probe.last_query %}
    
    {% if params.VERIFY == 'query' %}
        {% if probeAttached %}
            { action_respond_info("CheckProbe : query : probeAttached=True") }
        {% else %}
            { action_respond_info("CheckProbe : query : probeAttached=False") }
        {% endif %}
        SET_GCODE_VARIABLE MACRO=GlobalVariables VARIABLE=probe_attached VALUE={ probeAttached }
    {% endif %}

    {% if params.VERIFY == 'docked' and probeAttached %}
        { action_emergency_stop("CheckProbe : Probe is not docked") }
    {% endif %}

    {% if params.VERIFY == 'attached' and not probeAttached %}
        { action_emergency_stop("CheckProbe : Probe is not attached") }
    {% endif %}

# Overrides
[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: BASE_QUAD_GANTRY_LEVEL
gcode:
    ATTACH_PROBE
    BASE_QUAD_GANTRY_LEVEL {% for p in params %}{'%s=%s' % (p, params[p])}{% endfor %}
    DOCK_PROBE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BASE_BED_MESH_CALIBRATE
gcode:
    ATTACH_PROBE
    BASE_BED_MESH_CALIBRATE {% for p in params %}{'%s=%s' % (p, params[p])}{% endfor %}
    DOCK_PROBE

[gcode_macro PROBE_CALIBRATE]
rename_existing: BASE_PROBE_CALIBRATE
gcode:
    ATTACH_PROBE
    BASE_PROBE_CALIBRATE {% for p in params %}{'%s=%s' % (p, params[p])}{% endfor %}
    DOCK_PROBE

[gcode_macro PROBE_ACCURACY]
rename_existing: BASE_PROBE_ACCURACY
gcode:
    ATTACH_PROBE
    BASE_PROBE_ACCURACY {% for p in params %}{'%s=%s' % (p, params[p])}{% endfor %}
    DOCK_PROBE

[gcode_macro M84]
rename_existing: M84.1
gcode:
    GlobalVariables reset=1
    M84.1

[gcode_macro M18]
rename_existing: M18.1
gcode:
    GlobalVariables reset=1
    M18.1